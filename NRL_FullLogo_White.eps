%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.26.5 (http://poppler.freedesktop.org)
%%Creator: Adobe Illustrator CC 2014 (Macintosh)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 226 151
%%HiResBoundingBox: 0 0 225.926 150.895
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 225.926 150.895 re
W
q
/DeviceCMYK {} cs
[0 0 0 0] sc
false op
false OP
q
[1 0 0 1 125.2534 82.4863] cm
0 0 m
-4.796 -10.993 l
4.796 -10.993 l
0 0 l
h
6.751 -15.531 m
-6.751 -15.531 l
-8.964 -20.4 l
-14.24 -20.4 l
-2.656 5.423 l
2.656 5.423 l
14.24 -20.4 l
8.928 -20.4 l
6.751 -15.531 l
h
f
Q
q
[1 0 0 1 151.7902 61.9753] cm
0 0 m
-5.054 0 l
-15.789 25.934 l
-10.329 25.934 l
-2.545 5.829 l
5.275 25.934 l
10.735 25.934 l
0 0 l
h
f
Q
q
[1 0 0 1 173.4245 82.4863] cm
0 0 m
-4.796 -10.993 l
4.796 -10.993 l
0 0 l
h
6.751 -15.531 m
-6.751 -15.531 l
-8.964 -20.4 l
-14.24 -20.4 l
-2.656 5.423 l
2.656 5.423 l
14.24 -20.4 l
8.928 -20.4 l
6.751 -15.531 l
h
f
Q
q
[1 0 0 1 194.0511 87.9092] cm
0 0 m
0 -21.323 l
13.281 -21.323 l
13.281 -25.823 l
-4.87 -25.823 l
-4.87 0 l
0 0 l
h
f
Q
q
[1 0 0 1 104.6265 87.9463] cm
0 0 m
4.869 0 l
4.869 -25.86 l
1.844 -25.86 l
1.844 -25.897 l
-11.731 -8.448 l
-11.731 -25.86 l
-16.601 -25.86 l
-16.601 -0.037 l
-12.654 -0.037 l
0 -16.047 l
0 0 l
h
f
Q
q
0 0 225.926 150.895 re
W
q
[1 0 0 1 41.1506 88.1992] cm
0 0 m
0 -14.633 l
0 -22.187 -4.634 -26.055 -11.057 -26.055 c
-17.187 -26.055 -22.405 -22.332 -22.405 -14.633 c
-22.405 0 l
-17.625 0 l
-17.625 -14.633 l
-17.625 -19.231 -14.998 -21.676 -11.02 -21.676 c
-7.043 -21.676 -4.78 -19.012 -4.78 -14.633 c
-4.78 0 l
0 0 l
h
f
Q
q
[1 0 0 1 48.3042 64.9909] cm
0 0 m
0 -3.467 -5.255 -3.467 -5.255 0 c
-5.255 3.467 0 3.467 0 0 c
f
Q
q
[1 0 0 1 68.3378 82.0687] cm
0 0 m
-0.876 1.46 -3.284 2.846 -6.057 2.846 c
-9.634 2.846 -11.349 1.35 -11.349 -0.547 c
-11.349 -2.773 -8.721 -3.394 -5.656 -3.759 c
-0.329 -4.415 4.634 -5.802 4.634 -11.896 c
4.634 -17.589 -0.401 -20.034 -6.094 -20.034 c
-11.312 -20.034 -15.326 -18.428 -17.224 -13.757 c
-13.21 -11.677 l
-12.078 -14.487 -9.123 -15.728 -6.021 -15.728 c
-2.993 -15.728 -0.146 -14.669 -0.146 -11.896 c
-0.146 -9.488 -2.664 -8.502 -6.057 -8.137 c
-11.276 -7.517 -16.093 -6.13 -16.093 -0.401 c
-16.093 4.853 -10.911 7.006 -6.204 7.043 c
-2.226 7.043 1.897 5.912 3.831 1.971 c
0 0 l
h
f
Q
q
[1 0 0 1 80.8194 64.9909] cm
0 0 m
0 -3.467 -5.255 -3.467 -5.255 0 c
-5.255 3.467 0 3.467 0 0 c
f
Q
q
[1 0 0 1 23.3286 48.8815] cm
0 0 m
6.99 0 l
9.878 0 11.164 -1.947 11.164 -3.895 c
11.164 -5.843 9.912 -7.791 6.99 -7.791 c
0 -7.791 l
0 0 l
h
202.598 102.014 m
-23.329 102.014 l
-23.329 -20.065 l
0 -20.065 l
0 -11.929 l
4.417 -11.929 l
11.512 -20.068 l
16.972 -20.068 l
16.972 -19.755 l
9.598 -11.443 l
14.225 -10.504 15.755 -7.13 15.755 -3.791 c
15.755 0.418 12.729 4.244 6.99 4.278 c
3.129 4.278 -0.731 4.313 -4.592 4.313 c
-4.592 -16.561 l
-19.829 -16.561 l
-19.829 98.514 l
199.075 98.514 l
199.075 -16.607 l
183.584 -16.607 l
183.538 4.244 l
178.982 4.244 l
178.982 -6.017 l
167.018 -6.017 l
167.018 4.244 l
162.426 4.244 l
162.426 -20.06 l
167.018 -20.06 l
167.018 -10.26 l
178.982 -10.26 l
178.982 -20.06 l
202.598 -20.06 l
202.598 102.014 l
h
f
Q
q
[1 0 0 1 43.0127 28.8132] cm
0 0 m
18.225 0 l
18.225 4.522 l
4.556 4.522 l
4.556 10.017 l
17.738 10.017 l
17.738 14.295 l
4.556 14.295 l
4.556 19.895 l
18.225 19.895 l
18.225 24.347 l
0 24.347 l
0 0 l
h
f
Q
q
[1 0 0 1 74.9512 43.6991] cm
0 0 m
-2.922 0.348 -5.426 0.939 -5.426 3.061 c
-5.426 4.87 -3.792 6.295 -0.383 6.295 c
2.26 6.295 4.556 4.974 5.391 3.582 c
9.042 5.461 l
7.199 9.217 3.269 10.296 -0.522 10.296 c
-5.008 10.26 -9.947 8.209 -9.947 3.2 c
-9.947 -2.261 -5.357 -3.582 -0.383 -4.173 c
2.851 -4.521 5.252 -5.46 5.252 -7.756 c
5.252 -10.399 2.539 -11.408 -0.349 -11.408 c
-3.305 -11.408 -6.122 -10.225 -7.2 -7.547 c
-11.025 -9.53 l
-9.217 -13.982 -5.391 -15.512 -0.418 -15.512 c
5.008 -15.512 9.807 -13.182 9.807 -7.756 c
9.807 -1.947 5.077 -0.626 0 0 c
f
Q
q
[1 0 0 1 88.7749 28.8132] cm
0 0 m
18.226 0 l
18.226 4.522 l
4.556 4.522 l
4.556 10.017 l
17.739 10.017 l
17.739 14.295 l
4.556 14.295 l
4.556 19.895 l
18.226 19.895 l
18.226 24.347 l
0 24.347 l
0 0 l
h
f
Q
q
[1 0 0 1 117.9653 37.6824] cm
0 0 m
4.522 10.365 l
9.043 0 l
0 0 l
h
2.017 15.477 m
-8.904 -8.869 l
-3.93 -8.869 l
-1.843 -4.278 l
10.887 -4.278 l
12.939 -8.869 l
17.947 -8.869 l
7.026 15.477 l
2.017 15.477 l
h
f
Q
q
[1 0 0 1 142.9043 41.0906] cm
0 0 m
0 7.791 l
6.99 7.791 l
9.877 7.791 11.164 5.844 11.164 3.896 c
11.164 1.948 9.912 0 6.99 0 c
0 0 l
h
15.755 4 m
15.755 8.209 12.729 12.035 6.99 12.069 c
3.129 12.069 -0.731 12.104 -4.592 12.104 c
-4.592 -12.277 l
0 -12.277 l
0 -4.139 l
4.417 -4.139 l
11.512 -12.277 l
16.972 -12.277 l
16.972 -11.964 l
9.598 -3.652 l
14.225 -2.713 15.755 0.661 15.755 4 c
f
Q
q
[1 0 0 1 174.2222 32.5693] cm
0 0 m
-6.017 0 -8.348 4.208 -8.381 8.243 c
-8.417 12.313 -5.877 16.695 0 16.695 c
2.122 16.695 4.278 15.964 5.879 14.4 c
8.939 17.356 l
6.435 19.825 3.305 21.077 0 21.077 c
-8.799 21.077 -12.938 14.608 -12.903 8.243 c
-12.869 1.913 -9.042 -4.312 0 -4.312 c
3.513 -4.312 6.749 -3.165 9.252 -0.695 c
6.122 2.469 l
4.522 0.87 2.122 0 0 0 c
f
Q
q
[1 0 0 1 20.7617 20.0164] cm
0 0 m
0 -17.752 l
10.892 -17.752 l
10.892 -19.6 l
-1.96 -19.6 l
-1.96 0 l
0 0 l
h
f
Q
q
[1 0 0 1 37.5898 6.7449] cm
0 0 m
9.8 0 l
4.9 11.144 l
0 0 l
h
10.584 -1.792 m
-0.784 -1.792 l
-2.8 -6.328 l
-4.872 -6.328 l
3.92 13.271 l
5.88 13.271 l
14.672 -6.328 l
12.6 -6.328 l
10.584 -1.792 l
h
f
Q
q
[1 0 0 1 57.5254 2.2645] cm
0 0 m
6.384 0 l
8.624 0 11.564 0.7 11.564 3.473 c
11.564 6.188 8.848 7.28 6.524 7.28 c
0 7.28 l
0 0 l
h
0 9.072 m
6.524 9.072 l
8.876 9.072 10.976 10.024 10.976 12.404 c
10.976 15.008 8.792 15.933 6.384 15.933 c
0 15.933 l
0 9.072 l
h
6.384 17.752 m
9.828 17.752 12.936 16.269 12.936 12.376 c
12.936 10.473 11.76 8.849 9.856 8.204 c
12.236 7.532 13.524 5.404 13.524 3.444 c
13.524 -0.615 9.912 -1.848 6.384 -1.848 c
-1.96 -1.848 l
-1.96 17.752 l
6.384 17.752 l
h
f
Q
q
[1 0 0 1 83.5376 1.9285] cm
0 0 m
5.32 -0.084 7.952 4.032 7.952 8.232 c
7.952 12.572 5.348 16.632 0 16.548 c
-5.264 16.632 -8.064 12.796 -7.98 8.232 c
-7.896 3.977 -5.376 -0.084 0 0 c
9.912 8.232 m
9.912 3.108 6.608 -1.932 0 -1.848 c
-6.664 -1.932 -9.94 3.137 -9.94 8.26 c
-9.94 13.748 -6.356 18.48 0 18.396 c
6.636 18.48 9.912 13.412 9.912 8.232 c
f
Q
q
[1 0 0 1 98.6011 18.1688] cm
0 0 m
0 -8.68 l
6.72 -8.68 l
9.856 -8.68 11.368 -6.832 11.368 -4.368 c
11.368 -1.904 9.856 0 6.832 0 c
0 0 l
h
14.112 -17.752 m
11.564 -17.752 l
5.068 -10.528 l
0 -10.528 l
0 -17.752 l
-1.96 -17.752 l
-1.96 1.848 l
6.832 1.848 l
11.172 1.848 13.328 -1.064 13.328 -4.368 c
13.328 -7.42 11.592 -10.164 7.42 -10.388 c
14.112 -17.752 l
h
f
Q
q
[1 0 0 1 119.209 6.7449] cm
0 0 m
9.8 0 l
4.899 11.144 l
0 0 l
h
10.583 -1.792 m
-0.784 -1.792 l
-2.801 -6.328 l
-4.872 -6.328 l
3.92 13.271 l
5.88 13.271 l
14.672 -6.328 l
12.6 -6.328 l
10.583 -1.792 l
h
f
Q
q
[1 0 0 1 139.9844 18.1688] cm
0 0 m
-6.916 0 l
-6.916 1.848 l
8.876 1.848 l
8.876 0 l
1.96 0 l
1.96 -17.752 l
0 -17.752 l
0 0 l
h
f
Q
q
[1 0 0 1 159.8633 1.9285] cm
0 0 m
5.32 -0.084 7.952 4.032 7.952 8.232 c
7.952 12.572 5.349 16.632 0 16.548 c
-5.264 16.632 -8.063 12.796 -7.979 8.232 c
-7.896 3.977 -5.376 -0.084 0 0 c
9.912 8.232 m
9.912 3.108 6.608 -1.932 0 -1.848 c
-6.663 -1.932 -9.939 3.137 -9.939 8.26 c
-9.939 13.748 -6.355 18.48 0 18.396 c
6.637 18.48 9.912 13.412 9.912 8.232 c
f
Q
q
[1 0 0 1 175.3477 18.1688] cm
0 0 m
0 -8.68 l
6.72 -8.68 l
9.856 -8.68 11.368 -6.832 11.368 -4.368 c
11.368 -1.904 9.856 0 6.832 0 c
0 0 l
h
14.112 -17.752 m
11.564 -17.752 l
5.068 -10.528 l
0 -10.528 l
0 -17.752 l
-1.96 -17.752 l
-1.96 1.848 l
6.832 1.848 l
11.172 1.848 13.328 -1.064 13.328 -4.368 c
13.328 -7.42 11.592 -10.164 7.42 -10.388 c
14.112 -17.752 l
h
f
Q
q
[1 0 0 1 198.6436 10.2166] cm
0 0 m
6.328 9.8 l
8.624 9.8 l
8.624 9.744 l
0.98 -1.904 l
0.98 -9.8 l
-0.979 -9.8 l
-0.979 -1.904 l
-8.512 9.744 l
-8.512 9.8 l
-6.243 9.8 l
0 0 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
